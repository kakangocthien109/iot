- Biến có thể được thay đổi giá trị
- Kiểu dữ liệu:
    + Integer (int): Số nguyên, có kích thước là 4 byte
    VD: int x;
    + Character (char): Ký tự, có kích thước là 1 byte. Có thể thao tác như 1 số nguyên theo bảng ASCII.
                        Mỗi ký tự chỉ biểu diễn trong phạm vi 8 bit
    VD: char c
    + Float (float): số thực, độ chính xác đơn, có kích thước 4 byte
    VD: float y 
    + Double (double): số thực, độ chính xác kép, có kích thước 8 byte
    VD: double z
    + Enum: liệt kê tất cả các giá trị trong khi khai báo. Lưu ý là giá trị của kiểu liệt kê được tính thành số nguyên.
    VD: 
    enum month {Jan, Feb, Mar, Apr = 10, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec};
    enum month thisMonth;
    thisMonth = Sep;
    printf("%d \n", thisMonth);

- Thêm long vào trước 1 kiểu dữ liệu để gấp đôi kích thước. 
- Thêm short vào trước 1 kiểu dữ liệu để chia 2 kích thước
- Chỉ dùng cho int, double
VD: long double x

- Muốn có số nguyên dương thì thêm unsigned vào trước, giá trị >=0

- int, char, float,... là kiểu dữ liệu
- x, x1, x2, y, z... là biến

- Kiểu định dạng thường dùng:
    + c: hiển thị ký tự
    + d/i : số nguyên hệ thập phân có dấu
    + f: số thực dấu chấm động hệ thập phân, mặc định 6 chữ số sau dấu chấm
    + g: số thực dấu chấm động hệ thập phân.
    + s: Chuỗi ký tự
    + u: Số nguyên hệ thập phân không dấu
    + ld: số nguyên hệ thập phân có dấu 8 byte.
    + Lf: Long double.
    + .<số ký số>f: ghi phần thập phân đến số

- Có thể vừa khai báo vừa gán giá trị, VD như int g = 1
- Toán tử 3 ngôi: <biến> = <điều kiện> ? < biểu thức 1> : <biểu thức 2>;
- Dịch trái 1 là x2, dịch phải 1 là chia 2

# /*---------------------------------------------------
# |                         Mảng                       |
# ---------------------------------------------------*/

- Khai báo 1 mảng: <kieu du lieu> ten[<kich thuoc mang>];
- Ví dụ: khai bảo mảng a gồm 100 phần tử kiểu integer: int a[100];
- Để truy nhập phần tử của mảng, ta có thể có 2 cách:
    + Cách 1: a[i], ví dụ a[9] là mình truy nhâp phần tử số 10 của mảng vì index bắt đầu từ 0 => vậy mảng trên, có các phần tử: 0-99
    + Cách 2: Dùng pointer, '*(a + i) , ví dụ '*(a+9) thì cũng tương đương a[9]

- Ví dụ bạn cần sắp xếp 10 số integer, nhập từ bàn phím
    + Trước tiên bạn cần có 1 mảng arr[10]; để lưu trữ các số trên
    + Sau đó mới sắp xếp các giá trị trong mảng đó

- Nếu chương trình chỉ yêu cầu sắp xếp 5 số integer thì ta có thể làm:
    + Ta có thể làm: int a1, a2, a3, a4, a5;

- Tuy nhiên, nếu đề bài yêu cầu sắp xếp 100 phần tử thì không thể khai báo kiểu trên được, mà phải dùng int a[100]; 

- Nên dùng kiểu khai báo <kieu du lieu> ten[<kich thuoc mang>];

- Liệt kê tất các hàm xử lý chuỗi, cách sử dụng, chức năng
* VD: islower,...
 
Hàm strcat() 
- Dùng để nối 2 chuỗi với nhau
- Format: strcat(str1, str2);
Hàm strchr() 
- Dùng để tìm kiếm ký tự trong chuỗi, trong đó chr có thể là 1 biến hay hằng
- VD: 
    char str1[] = "Ha Noi";
    char chr = 'a';
    if (strchr(str1, chr) !=NULL) {
        printf("\n %c co xuat hien trong chuoi &s \n", chr, str1);
    }
    else {
        printf("\n %c khong xuat hien trong chuoi &s \n", chr, str);
    }

*Ask mentors | Hàm strcmp()
- Dùng để so sánh 2 chuỗi với nhau
- So sánh theo bảng mã ASCII
- Được dùng để sắp xếp các chuỗi theo chiều tăng/giảm dần
- Hàm sẽ trả về 1 số là hiệu của 2 ký tự cuối cùng đem so sánh
- Hàm strcmp(s1,s2) trả về giá trị như sau:
    + Một số âm nếu s1<s2
    + Số 0 nếu s1 = s2
    + Một số dương nếu s1>s2

Hàm strcpy() 
- Dùng để gán chuỗi cho chuỗi
- Format: strcpy(dest, src);
Hàm strlen()
- Dùng để lấy kích thước của chuỗi
- VD: char str [] = "nguyennt"
      for(int i = 0; i<strlen(str); i++) {
          printf("%c * ", str[i]);
      }
      return 0;
    => n * g * u * y * e * n * n * t 


Hàm strncat()
- Nối n ký tự của chuỗi sau vào chuỗi trước
- Cú pháp: strncat(s1, s2, n)
Hàm strncpy()
- Gán n ký tự đầu tiên của chuỗi s2 cho n ký tự đầu tiên của chuỗi s1
- Format: strncpy(s1, s2, n);
    + VD:   char s1[] = "abcd", s2[]= "1234";
            strncpy(s1, s2, 2);
            puts(s1); // Kết quả của s1 là 12cd

Hàm strstr() 
- Dùng để tìm kiếm chuỗi trong chuỗi
- Format: strstr(Chuỗi1, Chuỗi2) // Tìm chuỗi2 trong chuỗi 1
- Nếu Chuỗi2 không có trong Chuỗi1 thì hàm trả về giá trị NULL, ngược lại hàm sẽ trả về 1 chuỗi bắt đầu từ vị trí đầu tiên tìm thấy Chuỗi2 cho đến hết Chuỗi1
- VD: 
    char str1[] = "abcdefghi", s2[] = "cdf";
    strstr(s1, s2);
    => Hàm trả kết quả cdefghi

    strstr(filestr, pattern); // Tra ve dia chi cua pattern trong filestr.
Hàm strrev()
- Dùng để đảo ngược trật tự của chuỗi
- Trả về kết quả là chuỗi đã đảo ngược
- VD: strrev(nguyennt.dev) sẽ trả về kết quả ved.tnneyugn :D

*Ask mentors | Hàm islower()
- Kiểm tra xem ký tự có phải là chữ thường hay không, nếu là chữ cái thường trả về 1, ngược lại trả về 0
- VD:   int islower (int c);

*Ask mentors | Hàm isupper ()
- Kiểm tra xem ký tự có phải là chữ hoa hay không, nếu là chữ hoa trả về 1, ngược lại trả về 0
- VD:   int islower (int c);

strtok()

Viết thêm dấu ngoặc nháy thì tự thêm NULL

&y là địa chỉ của y

* + địa chỉ = giá trị địa chỉ đó

fun(arr) => tên của mảng arr cũng là con trỏ

Tăng địa chỉ => tăng qua phần tử tiếp theo

%p: in giá trị của con trỏ

hàm puts() => in ra màn hình
hàm free() => xoá cấp phát bộ nhớ